// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthenticationResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AuthenticationResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AuthenticationResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AuthenticationResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AuthenticationResponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AuthenticationResponse_2eproto;
namespace BackupPB {
class AuthenticationResponse;
class AuthenticationResponseDefaultTypeInternal;
extern AuthenticationResponseDefaultTypeInternal _AuthenticationResponse_default_instance_;
}  // namespace BackupPB
PROTOBUF_NAMESPACE_OPEN
template<> ::BackupPB::AuthenticationResponse* Arena::CreateMaybeMessage<::BackupPB::AuthenticationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BackupPB {

enum AuthenticationResponse_Status : int {
  AuthenticationResponse_Status_OK = 0,
  AuthenticationResponse_Status_FAIL = 1
};
bool AuthenticationResponse_Status_IsValid(int value);
constexpr AuthenticationResponse_Status AuthenticationResponse_Status_Status_MIN = AuthenticationResponse_Status_OK;
constexpr AuthenticationResponse_Status AuthenticationResponse_Status_Status_MAX = AuthenticationResponse_Status_FAIL;
constexpr int AuthenticationResponse_Status_Status_ARRAYSIZE = AuthenticationResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticationResponse_Status_descriptor();
template<typename T>
inline const std::string& AuthenticationResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticationResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticationResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticationResponse_Status_descriptor(), enum_t_value);
}
inline bool AuthenticationResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthenticationResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticationResponse_Status>(
    AuthenticationResponse_Status_descriptor(), name, value);
}
// ===================================================================

class AuthenticationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BackupPB.AuthenticationResponse) */ {
 public:
  inline AuthenticationResponse() : AuthenticationResponse(nullptr) {}
  virtual ~AuthenticationResponse();

  AuthenticationResponse(const AuthenticationResponse& from);
  AuthenticationResponse(AuthenticationResponse&& from) noexcept
    : AuthenticationResponse() {
    *this = ::std::move(from);
  }

  inline AuthenticationResponse& operator=(const AuthenticationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationResponse& operator=(AuthenticationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticationResponse* internal_default_instance() {
    return reinterpret_cast<const AuthenticationResponse*>(
               &_AuthenticationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticationResponse& a, AuthenticationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationResponse* New() const final {
    return CreateMaybeMessage<AuthenticationResponse>(nullptr);
  }

  AuthenticationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticationResponse& from);
  void MergeFrom(const AuthenticationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BackupPB.AuthenticationResponse";
  }
  protected:
  explicit AuthenticationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthenticationResponse_2eproto);
    return ::descriptor_table_AuthenticationResponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AuthenticationResponse_Status Status;
  static constexpr Status OK =
    AuthenticationResponse_Status_OK;
  static constexpr Status FAIL =
    AuthenticationResponse_Status_FAIL;
  static inline bool Status_IsValid(int value) {
    return AuthenticationResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    AuthenticationResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    AuthenticationResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    AuthenticationResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return AuthenticationResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return AuthenticationResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return AuthenticationResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // required .BackupPB.AuthenticationResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::BackupPB::AuthenticationResponse_Status status() const;
  void set_status(::BackupPB::AuthenticationResponse_Status value);
  private:
  ::BackupPB::AuthenticationResponse_Status _internal_status() const;
  void _internal_set_status(::BackupPB::AuthenticationResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:BackupPB.AuthenticationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_AuthenticationResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthenticationResponse

// required .BackupPB.AuthenticationResponse.Status status = 1;
inline bool AuthenticationResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticationResponse::has_status() const {
  return _internal_has_status();
}
inline void AuthenticationResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::BackupPB::AuthenticationResponse_Status AuthenticationResponse::_internal_status() const {
  return static_cast< ::BackupPB::AuthenticationResponse_Status >(status_);
}
inline ::BackupPB::AuthenticationResponse_Status AuthenticationResponse::status() const {
  // @@protoc_insertion_point(field_get:BackupPB.AuthenticationResponse.status)
  return _internal_status();
}
inline void AuthenticationResponse::_internal_set_status(::BackupPB::AuthenticationResponse_Status value) {
  assert(::BackupPB::AuthenticationResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void AuthenticationResponse::set_status(::BackupPB::AuthenticationResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BackupPB.AuthenticationResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace BackupPB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BackupPB::AuthenticationResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BackupPB::AuthenticationResponse_Status>() {
  return ::BackupPB::AuthenticationResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AuthenticationResponse_2eproto
