// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JobResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JobResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JobResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JobResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_JobResponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JobResponse_2eproto;
class JobResponse;
class JobResponseDefaultTypeInternal;
extern JobResponseDefaultTypeInternal _JobResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::JobResponse* Arena::CreateMaybeMessage<::JobResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum JobResponse_Status : int {
  JobResponse_Status_OK = 0,
  JobResponse_Status_FAIL = 1
};
bool JobResponse_Status_IsValid(int value);
constexpr JobResponse_Status JobResponse_Status_Status_MIN = JobResponse_Status_OK;
constexpr JobResponse_Status JobResponse_Status_Status_MAX = JobResponse_Status_FAIL;
constexpr int JobResponse_Status_Status_ARRAYSIZE = JobResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobResponse_Status_descriptor();
template<typename T>
inline const std::string& JobResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JobResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JobResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JobResponse_Status_descriptor(), enum_t_value);
}
inline bool JobResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JobResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JobResponse_Status>(
    JobResponse_Status_descriptor(), name, value);
}
// ===================================================================

class JobResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JobResponse) */ {
 public:
  inline JobResponse() : JobResponse(nullptr) {}
  virtual ~JobResponse();

  JobResponse(const JobResponse& from);
  JobResponse(JobResponse&& from) noexcept
    : JobResponse() {
    *this = ::std::move(from);
  }

  inline JobResponse& operator=(const JobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobResponse& operator=(JobResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobResponse* internal_default_instance() {
    return reinterpret_cast<const JobResponse*>(
               &_JobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JobResponse& a, JobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JobResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobResponse* New() const final {
    return CreateMaybeMessage<JobResponse>(nullptr);
  }

  JobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobResponse& from);
  void MergeFrom(const JobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JobResponse";
  }
  protected:
  explicit JobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JobResponse_2eproto);
    return ::descriptor_table_JobResponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef JobResponse_Status Status;
  static constexpr Status OK =
    JobResponse_Status_OK;
  static constexpr Status FAIL =
    JobResponse_Status_FAIL;
  static inline bool Status_IsValid(int value) {
    return JobResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    JobResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    JobResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    JobResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return JobResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return JobResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return JobResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kChecksumFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // required string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string checksum = 3;
  bool has_checksum() const;
  private:
  bool _internal_has_checksum() const;
  public:
  void clear_checksum();
  const std::string& checksum() const;
  void set_checksum(const std::string& value);
  void set_checksum(std::string&& value);
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  std::string* mutable_checksum();
  std::string* release_checksum();
  void set_allocated_checksum(std::string* checksum);
  private:
  const std::string& _internal_checksum() const;
  void _internal_set_checksum(const std::string& value);
  std::string* _internal_mutable_checksum();
  public:

  // required .JobResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::JobResponse_Status status() const;
  void set_status(::JobResponse_Status value);
  private:
  ::JobResponse_Status _internal_status() const;
  void _internal_set_status(::JobResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:JobResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checksum_;
  int status_;
  friend struct ::TableStruct_JobResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JobResponse

// required string path = 2;
inline bool JobResponse::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JobResponse::has_path() const {
  return _internal_has_path();
}
inline void JobResponse::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JobResponse::path() const {
  // @@protoc_insertion_point(field_get:JobResponse.path)
  return _internal_path();
}
inline void JobResponse::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:JobResponse.path)
}
inline std::string* JobResponse::mutable_path() {
  // @@protoc_insertion_point(field_mutable:JobResponse.path)
  return _internal_mutable_path();
}
inline const std::string& JobResponse::_internal_path() const {
  return path_.Get();
}
inline void JobResponse::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResponse::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JobResponse.path)
}
inline void JobResponse::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:JobResponse.path)
}
inline void JobResponse::set_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JobResponse.path)
}
inline std::string* JobResponse::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResponse::release_path() {
  // @@protoc_insertion_point(field_release:JobResponse.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResponse::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JobResponse.path)
}

// required .JobResponse.Status status = 1;
inline bool JobResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool JobResponse::has_status() const {
  return _internal_has_status();
}
inline void JobResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::JobResponse_Status JobResponse::_internal_status() const {
  return static_cast< ::JobResponse_Status >(status_);
}
inline ::JobResponse_Status JobResponse::status() const {
  // @@protoc_insertion_point(field_get:JobResponse.status)
  return _internal_status();
}
inline void JobResponse::_internal_set_status(::JobResponse_Status value) {
  assert(::JobResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void JobResponse::set_status(::JobResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:JobResponse.status)
}

// optional string checksum = 3;
inline bool JobResponse::_internal_has_checksum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool JobResponse::has_checksum() const {
  return _internal_has_checksum();
}
inline void JobResponse::clear_checksum() {
  checksum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& JobResponse::checksum() const {
  // @@protoc_insertion_point(field_get:JobResponse.checksum)
  return _internal_checksum();
}
inline void JobResponse::set_checksum(const std::string& value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:JobResponse.checksum)
}
inline std::string* JobResponse::mutable_checksum() {
  // @@protoc_insertion_point(field_mutable:JobResponse.checksum)
  return _internal_mutable_checksum();
}
inline const std::string& JobResponse::_internal_checksum() const {
  return checksum_.Get();
}
inline void JobResponse::_internal_set_checksum(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResponse::set_checksum(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  checksum_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JobResponse.checksum)
}
inline void JobResponse::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:JobResponse.checksum)
}
inline void JobResponse::set_checksum(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JobResponse.checksum)
}
inline std::string* JobResponse::_internal_mutable_checksum() {
  _has_bits_[0] |= 0x00000002u;
  return checksum_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResponse::release_checksum() {
  // @@protoc_insertion_point(field_release:JobResponse.checksum)
  if (!_internal_has_checksum()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return checksum_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResponse::set_allocated_checksum(std::string* checksum) {
  if (checksum != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  checksum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checksum,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JobResponse.checksum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JobResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JobResponse_Status>() {
  return ::JobResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JobResponse_2eproto
