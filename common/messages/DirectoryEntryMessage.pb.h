// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DirectoryEntryMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DirectoryEntryMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DirectoryEntryMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DirectoryEntryMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DirectoryEntryMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DirectoryEntryMessage_2eproto;
class DirectoryEntryMessage;
class DirectoryEntryMessageDefaultTypeInternal;
extern DirectoryEntryMessageDefaultTypeInternal _DirectoryEntryMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DirectoryEntryMessage* Arena::CreateMaybeMessage<::DirectoryEntryMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum DirectoryEntryMessage_Type : int {
  DirectoryEntryMessage_Type_DIRTYPE = 0,
  DirectoryEntryMessage_Type_FILETYPE = 1
};
bool DirectoryEntryMessage_Type_IsValid(int value);
constexpr DirectoryEntryMessage_Type DirectoryEntryMessage_Type_Type_MIN = DirectoryEntryMessage_Type_DIRTYPE;
constexpr DirectoryEntryMessage_Type DirectoryEntryMessage_Type_Type_MAX = DirectoryEntryMessage_Type_FILETYPE;
constexpr int DirectoryEntryMessage_Type_Type_ARRAYSIZE = DirectoryEntryMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirectoryEntryMessage_Type_descriptor();
template<typename T>
inline const std::string& DirectoryEntryMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DirectoryEntryMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DirectoryEntryMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DirectoryEntryMessage_Type_descriptor(), enum_t_value);
}
inline bool DirectoryEntryMessage_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectoryEntryMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DirectoryEntryMessage_Type>(
    DirectoryEntryMessage_Type_descriptor(), name, value);
}
// ===================================================================

class DirectoryEntryMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DirectoryEntryMessage) */ {
 public:
  inline DirectoryEntryMessage() : DirectoryEntryMessage(nullptr) {}
  virtual ~DirectoryEntryMessage();

  DirectoryEntryMessage(const DirectoryEntryMessage& from);
  DirectoryEntryMessage(DirectoryEntryMessage&& from) noexcept
    : DirectoryEntryMessage() {
    *this = ::std::move(from);
  }

  inline DirectoryEntryMessage& operator=(const DirectoryEntryMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectoryEntryMessage& operator=(DirectoryEntryMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectoryEntryMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectoryEntryMessage* internal_default_instance() {
    return reinterpret_cast<const DirectoryEntryMessage*>(
               &_DirectoryEntryMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DirectoryEntryMessage& a, DirectoryEntryMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectoryEntryMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectoryEntryMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectoryEntryMessage* New() const final {
    return CreateMaybeMessage<DirectoryEntryMessage>(nullptr);
  }

  DirectoryEntryMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectoryEntryMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectoryEntryMessage& from);
  void MergeFrom(const DirectoryEntryMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectoryEntryMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DirectoryEntryMessage";
  }
  protected:
  explicit DirectoryEntryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DirectoryEntryMessage_2eproto);
    return ::descriptor_table_DirectoryEntryMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DirectoryEntryMessage_Type Type;
  static constexpr Type DIRTYPE =
    DirectoryEntryMessage_Type_DIRTYPE;
  static constexpr Type FILETYPE =
    DirectoryEntryMessage_Type_FILETYPE;
  static inline bool Type_IsValid(int value) {
    return DirectoryEntryMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    DirectoryEntryMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    DirectoryEntryMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    DirectoryEntryMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return DirectoryEntryMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return DirectoryEntryMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return DirectoryEntryMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kChecksumFieldNumber = 3,
    kTypeFieldNumber = 2,
    kDateFieldNumber = 4,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string checksum = 3;
  bool has_checksum() const;
  private:
  bool _internal_has_checksum() const;
  public:
  void clear_checksum();
  const std::string& checksum() const;
  void set_checksum(const std::string& value);
  void set_checksum(std::string&& value);
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  std::string* mutable_checksum();
  std::string* release_checksum();
  void set_allocated_checksum(std::string* checksum);
  private:
  const std::string& _internal_checksum() const;
  void _internal_set_checksum(const std::string& value);
  std::string* _internal_mutable_checksum();
  public:

  // required .DirectoryEntryMessage.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::DirectoryEntryMessage_Type type() const;
  void set_type(::DirectoryEntryMessage_Type value);
  private:
  ::DirectoryEntryMessage_Type _internal_type() const;
  void _internal_set_type(::DirectoryEntryMessage_Type value);
  public:

  // optional int32 date = 4;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int32 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DirectoryEntryMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checksum_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 date_;
  friend struct ::TableStruct_DirectoryEntryMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DirectoryEntryMessage

// required string name = 1;
inline bool DirectoryEntryMessage::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DirectoryEntryMessage::has_name() const {
  return _internal_has_name();
}
inline void DirectoryEntryMessage::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DirectoryEntryMessage::name() const {
  // @@protoc_insertion_point(field_get:DirectoryEntryMessage.name)
  return _internal_name();
}
inline void DirectoryEntryMessage::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DirectoryEntryMessage.name)
}
inline std::string* DirectoryEntryMessage::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DirectoryEntryMessage.name)
  return _internal_mutable_name();
}
inline const std::string& DirectoryEntryMessage::_internal_name() const {
  return name_.Get();
}
inline void DirectoryEntryMessage::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DirectoryEntryMessage::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DirectoryEntryMessage.name)
}
inline void DirectoryEntryMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DirectoryEntryMessage.name)
}
inline void DirectoryEntryMessage::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DirectoryEntryMessage.name)
}
inline std::string* DirectoryEntryMessage::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DirectoryEntryMessage::release_name() {
  // @@protoc_insertion_point(field_release:DirectoryEntryMessage.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DirectoryEntryMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DirectoryEntryMessage.name)
}

// required .DirectoryEntryMessage.Type type = 2;
inline bool DirectoryEntryMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DirectoryEntryMessage::has_type() const {
  return _internal_has_type();
}
inline void DirectoryEntryMessage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::DirectoryEntryMessage_Type DirectoryEntryMessage::_internal_type() const {
  return static_cast< ::DirectoryEntryMessage_Type >(type_);
}
inline ::DirectoryEntryMessage_Type DirectoryEntryMessage::type() const {
  // @@protoc_insertion_point(field_get:DirectoryEntryMessage.type)
  return _internal_type();
}
inline void DirectoryEntryMessage::_internal_set_type(::DirectoryEntryMessage_Type value) {
  assert(::DirectoryEntryMessage_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void DirectoryEntryMessage::set_type(::DirectoryEntryMessage_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DirectoryEntryMessage.type)
}

// optional string checksum = 3;
inline bool DirectoryEntryMessage::_internal_has_checksum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DirectoryEntryMessage::has_checksum() const {
  return _internal_has_checksum();
}
inline void DirectoryEntryMessage::clear_checksum() {
  checksum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DirectoryEntryMessage::checksum() const {
  // @@protoc_insertion_point(field_get:DirectoryEntryMessage.checksum)
  return _internal_checksum();
}
inline void DirectoryEntryMessage::set_checksum(const std::string& value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:DirectoryEntryMessage.checksum)
}
inline std::string* DirectoryEntryMessage::mutable_checksum() {
  // @@protoc_insertion_point(field_mutable:DirectoryEntryMessage.checksum)
  return _internal_mutable_checksum();
}
inline const std::string& DirectoryEntryMessage::_internal_checksum() const {
  return checksum_.Get();
}
inline void DirectoryEntryMessage::_internal_set_checksum(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DirectoryEntryMessage::set_checksum(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  checksum_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DirectoryEntryMessage.checksum)
}
inline void DirectoryEntryMessage::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DirectoryEntryMessage.checksum)
}
inline void DirectoryEntryMessage::set_checksum(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DirectoryEntryMessage.checksum)
}
inline std::string* DirectoryEntryMessage::_internal_mutable_checksum() {
  _has_bits_[0] |= 0x00000002u;
  return checksum_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DirectoryEntryMessage::release_checksum() {
  // @@protoc_insertion_point(field_release:DirectoryEntryMessage.checksum)
  if (!_internal_has_checksum()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return checksum_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DirectoryEntryMessage::set_allocated_checksum(std::string* checksum) {
  if (checksum != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  checksum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checksum,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DirectoryEntryMessage.checksum)
}

// optional int32 date = 4;
inline bool DirectoryEntryMessage::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DirectoryEntryMessage::has_date() const {
  return _internal_has_date();
}
inline void DirectoryEntryMessage::clear_date() {
  date_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DirectoryEntryMessage::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DirectoryEntryMessage::date() const {
  // @@protoc_insertion_point(field_get:DirectoryEntryMessage.date)
  return _internal_date();
}
inline void DirectoryEntryMessage::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  date_ = value;
}
inline void DirectoryEntryMessage::set_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:DirectoryEntryMessage.date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DirectoryEntryMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DirectoryEntryMessage_Type>() {
  return ::DirectoryEntryMessage_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DirectoryEntryMessage_2eproto
